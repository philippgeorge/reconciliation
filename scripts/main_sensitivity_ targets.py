# Leading Questions:
# How big is the distance from the data sets generated by the methods from
# the yearly targets published in the Statistical Factsheet 2018 by ENTSO-E?

import pandas as pd
import numpy as np
import auxiliary_functions as aux
import plotting as plot
import correction_methods as cm
import comparison as cmp
import testing as t
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import os
from time import time
import sys
import copy
from collections import defaultdict
import matplotlib.pyplot as plt

path_g = "../input/official_data/generation_new_filled.csv"
path_d = "../input/official_data/demand.csv"
path_F = "../input/official_data/crossborder.csv"
path_t = "../input/official_data/gen_targets.csv"

path_DEM = "/Users/pg/bachelor_thesis/output/clean_sets/DEM"
path_CAS = "/Users/pg/bachelor_thesis/output/clean_sets/CAS"
path_ADD = "/Users/pg/bachelor_thesis/output/clean_sets/ADD"
path_FAC = "/Users/pg/bachelor_thesis/output/clean_sets/FAC"
path_SIGI = "/Users/pg/bachelor_thesis/output/clean_sets/SIGI"
path_SIGE = "/Users/pg/bachelor_thesis/output/clean_sets/SIGE"

paths = {}
paths["DEM"] = path_DEM
paths["CAS"] = path_CAS
paths["ADD"] = path_ADD
paths["FAC"] = path_FAC
paths["SIGI"] = path_SIGI
paths["SIGE"] = path_SIGE


# Load target from ENTSO-E Statistical Factsheet 2018
targets = pd.read_csv(path_t)
new_names = [x[:2] + "_" + targets[x][0] for x in targets.columns]
targets.columns = new_names
# Filter for 28 countries that are considered in this work
g_d, F = aux.load_data(path_g, path_d, path_F)
included_countries = g_d.keys()
# Generate country specific production type index
p_index = {}
for country, df in g_d.items():  
    p_index[country] = [x for x in df.columns.values if "demand" not in x]
    # Index for all production types
targets = targets[[x for x in targets.columns if x[:2] in included_countries]]
targets = targets.iloc[2:]

# Load different data sets
clean_set = {}
for method, path in paths.items():
    clean_set[method] = aux.load_all_csv_files(path)

distance = {}
for method, v in clean_set.items():
    distance[method] = {}
    for country, df in v.items():
        x = []
        y_0 = []
        y_1 = []
        e = 0
        for p in p_index[country]:
            x.append(p)
            y_0.append(float(targets[country + "_" + p].iloc[0]))
            y_1.append(df[p].sum(axis=0))
            # Error per production type
            e += (sum(y_0) - sum(y_1)) ** 2
            # Plot values for verification
    
        distance[method][country] = e
# Analyse distance data
indicator = {}
raw_distance = sum(distance["DEM"].values())
for method, v in distance.items():
    method_distance =  sum(v.values())
    indicator[method] = method_distance / raw_distance
# Sort dictionary
indicator = {k: v for k, v in sorted(indicator.items(), key=lambda item: item[1], reverse=True)}
# Plot as horizontal bars
x = list(indicator.keys())
y = list(indicator.values())
print(x, y)
plot.horizontal_bar_plot(x, y)
    
